@startuml
package "Sistema de Signatura i Acreditació Blockchain" {
  class Laboratori {
    +clauPublica: String
    +clauPrivada: String
    +nom: String
    +registrarSignatura(document: Document, signatura: Signatura, nonce: Integer): IDTransaccio
    +anularSignatura(document: Document, signatura: Signatura, nonce: Integer): IDTransaccio
  }   

  class Usuari {
    +clauPublica: String
    +clauPrivada: String
    +nom: String
    +isVerified: Boolean
    +isAuditor: Boolean
    +nextNonce: Integer
    +verificarDocument(document: Document, clauSign: String): Boolean
    +consultarAcreditacions(clauPublicaLaboratori: String): List<Acreditació>
    +registrarAcreditacio(acreditacio: Acreditacio): IDTransaccio
    +anularAcreditacio(acreditacio: Acreditacio): IDTransaccio
    +signarDocument(hash: Document, nonce: Integer): Signatura
    +verificarLaboratori(clauPublicaLaboratori: String, verificat Boolean)
    +verificarUsuari(clauPublicaUsuari: String, verificat Boolean)
    +afegirSignatura(hash: Document, signatura: Signatura): IDTransaccio
    +anularSignatura(hash: Document, signatura: Signatura): IDTransaccio
  }

  class Document {
    +identificador: String
    +contingut: byte[]
    +calcularHash(): String
  }
  
  struct dadesSignades {
    +hashDocument: String
    +signatura: byte[]
  }

  enum TipusDocument {
    +PDF
    +DadesProcessables
  }
  
  
}

package "Blockchain" {
  class RegistreSignatures {
    +IDContracte: String 
    verificarSignatura(hash: Document): Boolean
    afegirSignatura(hash: Document, signatura: Signatura, clauLab: String, clauSign: String): IDTransaccio
    anularSignatura(hash: Document, signatura: Signatura, clauLab: String, clauSign: String): IDTransaccio
    
    
  }

  class RegistreAcreditacions {
    +IDContracte: String 
    +consultarAcreditacions(clauLab: String): List<Acreditació>
    +registrarAcreditacio(clauLab: String, acreditacio: Acreditacio): Boolean
    +anularAcreditacio(clauLab: String, acreditacio: Acreditacio): Boolean
    +verificarLaboratori(clauLab: String, verificat Boolean) : Boolean
    +verificarUsuari(clauUsuari: String, verificat Boolean): Boolean
  }
  
  struct Signatura {
    +IDTransaccio: String
    +hashDocument: String 
    +valorSignatura: String
    +clauPublicaSignant: String 
    +timestamp: DateTime
    +nonce: Integer
  }    
  
  struct Acreditació {
    +IDTransaccio: String 
    +nom: String 
    +clauPublicaLab: String 
    +valorSignatura: String
    +timestamp: DateTime 
    +iniciValidesa: DateTime
    +fiValidesa: DateTime
  }
  
  struct LaboratoriRegistrat {
    +clauPublicaLaboratori: String
    +nom: String
    +isVerified: Boolean
  }
  
  struct SignatariRegistrat {
    +clauPublicaUsuari: String
    +nom: String
    +isVerified: Boolean
  }
  
  struct Signatari {
    +clauPublicaUsuari: String
    +nextNonce: Integer
  }

}    

RegistreSignatures --> Signatura : <list>
RegistreSignatures --> Signatari : <list>
RegistreAcreditacions --> Acreditació : <list>
RegistreAcreditacions --> LaboratoriRegistrat : <list>
RegistreAcreditacions --> SignatariRegistrat : <list>
Usuari --* RegistreAcreditacions : Afegeix/Anul·la acreditació >
Usuari ..> RegistreAcreditacions : Consulta
Usuari ..> RegistreSignatures : Consulta

Usuari --* RegistreAcreditacions : Verifica signatari / Laboratori >
Usuari --* Laboratori : Envia petició signatura / anul·lació >
Laboratori --* RegistreSignatures : Afegeix/Anul·la signatura >
Usuari --* RegistreSignatures : Afegeix/Anul·la signatura >

Usuari --* Document : Demana hash >
Usuari --* dadesSignades : Genera >
dadesSignades --* Usuari : Obté >
Document --* Usuari : hash >
Document -- TipusDocument : És de tipus >
@enduml
